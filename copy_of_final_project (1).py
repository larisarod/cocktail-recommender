# -*- coding: utf-8 -*-
"""Copy of final_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CMSHQrnfVopBi98-I8ZPxbHmCNpqSuiv
"""

import pandas as pd
from google.colab import files

uploaded = files.upload()

df = pd.read_csv('final_cocktails.csv')
df.head()

#tokenize ingredients
df['ingredients_list'] = df['ingredients'].apply(lambda x: eval(x) if isinstance(x, str) else []) #ingredients to list
#df['ingredients_list'] = df['ingredients'].apply(lambda x: x.split(','))
#df['ingredients_list'] = df['ingredients_list'].apply(
    #lambda x: [item.strip() for item in x if isinstance(item, str)]
#)
data = df['ingredients_list'].tolist() #tokenize
data

import gensim
from gensim.models import Word2Vec
model = gensim.models.Word2Vec(data, min_count = 1, vector_size = 100, window = 5, sg=1) #build/ train skip-gram model
print(f'Corpus Size: {model.corpus_total_words}')
print(f'Training Time: {model.total_train_time}')
print(f'Sample Words: {list(model.wv.index_to_key[:10])}')

def recommend_by_similarity(user_ingredients, df, model, top_n=5):
    # Filter user ingredients present in the model vocabulary
    valid_ingredients = [ing for ing in user_ingredients if ing in model.wv.key_to_index]
    if not valid_ingredients:
        raise ValueError("None of the user's ingredients are in the Word2Vec vocabulary.")

    # Compute average embedding for valid ingredients
    user_vector = sum([model.wv[ing] for ing in valid_ingredients]) / len(valid_ingredients)

    # Compute similarity of each drink to the user vector
    def compute_similarity(ingredients):
        valid_drink_ingredients = [ing for ing in ingredients if ing in model.wv.key_to_index]
        if not valid_drink_ingredients:
            return 0  # No valid ingredients in the drink
        return sum([model.wv.similarity(ing, user_vector) for ing in valid_drink_ingredients]) / len(valid_drink_ingredients)

    # Apply similarity calculation
    df['similarity'] = df['ingredients_list'].apply(compute_similarity)

    # Recommend top drinks
    return df.sort_values(by='similarity', ascending=False).head(top_n)

user_ingredients = ['Gin', 'Lime Juice']

recommendations = recommend_by_similarity(user_ingredients, df, model)
print(recommendations[['name', 'ingredients', 'similarity']])

#words = list(set([item for sublist in data for item in sublist])) #unique set of words/ingredients from data
#print(words)
words = model.wv.index_to_key
print(words)

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

vector_list = model.wv[words] #vectorize words
vector_list

#cosine similarity
def recommend_drinks(user_ingredients, df, vectorizer):
    # convert user's ingredients to binary vector
    user_vector = [1 if ingredient in user_ingredients else 0 for ingredient in vectorize.get_feature_names_out()]

    # compute similarity scores
    ingredient_matrix = vector_list.transform(df['ingredients_list'])
    similarity_scores = cosine_similarity([user_vector], ingredient_matrix)

    # add similarity scores and sort
    df['similarity'] = similarity_scores[0]
    recommendations = df.sort_values(by='similarity', ascending=False)

    return recommendations[['name', 'ingredients', 'instructions', 'similarity']].head(5)

#testing code
user_test = ['Tequila', 'Grendadine']
recommend_drinks(user_test, df, vectorize)

from google.colab import drive
drive.mount('/content/drive')